start: _decl_global*


// templates

_sep{x}: x ("," x)*
_sep0{x}: _sep{x}?
_paren{x}: "(" x ")"
_brack{x}: "[" x "]"
_brace{x}: "{" x "}"

// declarations

_decl_global: decl_fun_sig ";"
            | decl_static_var ";"
            | decl_fun

var_sig: TYP CNAME

decl_fun: decl_fun_sig block

decl_fun_sig: TYP CNAME decl_fun_sig_params

decl_fun_sig_params: _paren{_sep0{var_sig}}

decl_static_var: var_sig ["=" _literal]


// statements

_statement: st_if
          | st_while
          | (st_asn | st_var_decl | st_return | _st_cmd | _expression) ";"

st_var_decl: var_sig ["=" _expression]

st_if: "if" _paren{_expression} block_or_line ["else" block_or_line]

st_while: "while" _paren{_expression} block_or_line

st_return: "return" _expression?

st_asn: CNAME "=" _expression

_st_cmd: KW_BREAK
       | KW_CONTINUE

// blocks

_statements: _statement*
block: _brace{ _statements }
block_or_line: block | _statement

// expressions

ex_prefix: UOP_PREFIX _expression

ex_postfix: _expression UOP_POSTFIX

ex_uop: ex_prefix | ex_postfix

ex_call: CNAME _paren{_sep0{_expression}}

ex_binary: _expression BOP _expression

ex_asn: CNAME "=" _expression

ex_rd_var: CNAME

ex_lit: _literal

_expression: _paren{_expression}
          | ex_lit
          | ex_call
          | ex_binary
          | ex_uop
          | ex_rd_var

// literals

_literal: lit_int
       | lit_char
       | lit_string

lit_int: SIG_INTEGER
lit_char: "'" STRING_CHAR "'"
lit_string: "\"" STRING "\""


// terminals

BOP: OP_MAT | OP_LOG | OP_CMP

OP_MAT: MAT_STAR | MAT_DIV | MAT_MOD | MAT_PLUS | MAT_MINUS
MAT_PLUS: "+"
MAT_MINUS: "-"
MAT_STAR: "*"
MAT_DIV: "/"
MAT_MOD: "%"

OP_LOG: LOG_AND | LOG_OR | LOG_LAND | LOG_LOR | LOG_RIGHT | LOG_LEFT
LOG_AND: "&"
LOG_OR: "|"
LOG_LAND: "&&"
LOG_LOR: "||"
LOG_RIGHT: ">>"
LOG_LEFT: "<<"

OP_CMP: CMP_LE | CMP_LT | CMP_GE | CMP_GT | CMP_EQ | CMP_NE
CMP_LE: "<="
CMP_LT: "<"
CMP_GE: ">="
CMP_GT: ">"
CMP_EQ: "=="
CMP_NE: "!="

UOP_PREFIX: UOP_NEG | UOP_INV | UOP_SUB
UOP_NEG: "!"
UOP_INV: "~"
UOP_SUB: "-"

UOP_POSTFIX: UOP_DEC | UOP_INC
UOP_DEC: "--"
UOP_INC: "++"

KW_CONTINUE: "continue"
KW_BREAK: "break"
KW_RETURN: "return"

TYP: TYP_CHAR | TYP_INT | TYP_STRING | TYP_VOID
TYP_INT: "int"
TYP_CHAR: "char"
TYP_STRING: "string"
TYP_VOID: "void"

LETTER: "a".."z" | "A".."Z"
WORD: LETTER+
CNAME: ("_" | LETTER) ("_" | LETTER | DIGIT)*
DIGIT: "0".."9"
INTEGER: DIGIT+
SIG_INTEGER: ["+"|"-"] INTEGER
STRING_CHAR: /[^"\\]|\\[nt"\\]/
STRING: STRING_CHAR+

WS: /[ \t\r\n]/+
COMMENT: /\/\/[^\n]*/
MULTILINE_COMMENT: "/*" /(.|\n)*?/ "*/"

%ignore WS
%ignore COMMENT
%ignore MULTILINE_COMMENT
